import os

import requests
import openai


def api_openweather(lat: str, lon: str) -> tuple[dict, float]: 
    """
    Function to retrieve the current temperature from OpenWeatherMap API based on the provided latitude and longitude.

    Parameters:
        lat (str): Latitude coordinate.
        lon (str): Longitude coordinate.

    Returns:
        dict: code Code of error, message Description of error
        float: Current temperature in Celsius if successful, or a JSON response with error information if unsuccessful.
    
    Raises:
        Exception: If any error occurs during the API request or data processing.
    """
    try:
        # Retrieve the API key from environment variable
        api_key = os.getenv("API_KEY_OPENWEATHERMAP")

        # Construct the API URL with latitude, longitude, API key, and units (metric for Celsius)
        url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={api_key}&units=metric"

        # Send a GET request to the API URL and obtain the response in JSON format
        res = requests.get(url)
        data = res.json()

        # Check if the API response contains error information (status code other than 200)
        if data["cod"] != 200:
            return data  # Return the JSON response with error information
        else:
            # If the response is successful, extract and return the current temperature in Celsius
            return data['main']['temp']

    except Exception as err:
        # If any exception occurs during the API request or data processing, raise an exception with the error message
        raise Exception(f"api_openweather: {err}")

    

def api_chatgpt(prompt: str) -> str:
    """
    Function to interact with the OpenAI GPT-3 API and get the response to a given prompt.

    Args:
    prompt (str): The user's input or question.

    Returns:
    str: The response generated by the GPT-3 language model.

    This function interacts with the OpenAI GPT-3 API to generate a response to a given prompt.
    It uses the 'os.getenv("API_KEY_OPENAI")' to retrieve the API key from the environment variables
    for authentication with the OpenAI API.

    The 'openai.Completion.create()' method is used to send the prompt to the GPT-3 engine for processing.
    The 'engine' parameter specifies the language model (in this case, 'text-davinci-003' is used).
    The 'prompt' parameter contains the user's input or question that GPT-3 will use to generate the response.
    The 'max_tokens' parameter limits the length of the generated response.

    The function then returns the response generated by GPT-3, which can be obtained from the 'text' attribute
    of the 'completion.choices[0]' object.

    If any exception occurs during the execution, the function raises an exception with the error message.
    """
    try:
        # Set the API key for OpenAI authentication
        openai.api_key = os.getenv("API_KEY_OPENAI")
        
        # Create a completion using the OpenAI GPT-3 engine
        completion = openai.Completion.create(
            engine='text-davinci-003',
            prompt=prompt,
            max_tokens=2048
        )

        # Return the generated response as a string
        return completion.choices[0].text

    except Exception as err:
        # If any exception occurs during the execution, raise an exception with the error message
        raise Exception(f"ERROR_PUTO {err}")

